FUNCTION_BLOCK "LSimaHydTO_HandleDBL"
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : APC_ERLF
FAMILY : LSimaHydTO
VERSION : 1.0
   VAR_INPUT 
      executeRead : Bool;
      executeWrite : Bool;
   END_VAR

   VAR_OUTPUT 
      busy { ExternalWritable := 'False'} : Bool;
      done { ExternalWritable := 'False'} : Bool;
      error { ExternalWritable := 'False'} : Bool;
      errorID { ExternalWritable := 'False'} : Int;
   END_VAR

   VAR_IN_OUT 
      memoryDB : Variant;
      cardDB : Variant;
   END_VAR

   VAR 
      statFBState { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      statExecuteReadOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statExecuteWriteOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statRetVal { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
   END_VAR

   VAR CONSTANT 
      FB_STATE_IDLE : Int;
      FB_STATE_READ : Int := 10;
      FB_STATE_WRITE : Int := 20;
      FB_STATE_ERROR : Int := 100;
   END_VAR


BEGIN
	//================================================================================
	//SIEMENS AG // (c)Copyright 2019 All Rights Reserved
	//--------------------------------------------------------------------------------
	//Library:       LSimaHydTO
	//Tested with:   S7-15xx
	//Engineering:   TIA Portal  V15 (SW 2.5)
	//Restrictions:  -
	//Requirements:  S7-1500
	//Functionality: Save and load DB data to/from card
	//
	//--------------------------------------------------------------------------------
	//Change log table:
	//
	//Version     Date          Expert in charge    Changes applied
	//01.00.00    15.03.2018    APC_ERLF            First released version
	//================================================================================
	
	
	CASE #statFBState OF
	    
	  #FB_STATE_IDLE: 
	
	    IF #executeRead AND NOT #statExecuteReadOld THEN
	      #busy := false;
	      #done := false;
	      #error := false;
	      #errorID := 0;
	      #statRetVal := READ_DBL(REQ := #executeRead, SRCBLK := #cardDB, BUSY => #busy, DSTBLK => #memoryDB);
	      IF #busy THEN
	        #statFBState := #FB_STATE_READ;
	      ELSE
	        #error := TRUE;
	        #errorID := #statRetVal;
	        #statFBState := #FB_STATE_ERROR;
	      END_IF;
	    ELSIF  #executeWrite AND NOT #statExecuteWriteOld THEN
	      #busy := false;
	      #done := false;
	      #error := false;
	      #errorID := 0;
	      #statRetVal := WRIT_DBL(REQ := #executeWrite, SRCBLK :=#memoryDB , BUSY => #busy, DSTBLK => #cardDB);
	      IF #busy THEN
	        #statFBState := #FB_STATE_WRITE;
	      ELSE
	        #error := TRUE;
	        #errorID := #statRetVal;
	        #statFBState := #FB_STATE_ERROR;
	      END_IF;
	    ELSIF NOT(#executeRead OR #executeWrite) THEN
	      #done := FALSE;
	      #busy := FALSE;
	    END_IF;
	    
	    
	  #FB_STATE_READ:
	    
	    #statRetVal := READ_DBL(REQ := #executeRead, SRCBLK := #cardDB, BUSY => #busy, DSTBLK => #memoryDB);;
	    IF NOT #busy THEN
	      IF #statRetVal = 0 THEN
	        #done := TRUE;
	        #statFBState := #FB_STATE_IDLE;
	      ELSE
	        #error := TRUE;
	        #errorID := #statRetVal;
	        #statFBState := #FB_STATE_ERROR;
	      END_IF;
	    END_IF;
	    
	    
	  #FB_STATE_WRITE:
	    
	    #statRetVal := WRIT_DBL(REQ := #executeWrite, SRCBLK :=#memoryDB , BUSY => #busy, DSTBLK => #cardDB);
	    IF NOT #busy THEN
	      IF #statRetVal = 0 THEN
	        #done := TRUE;
	        #statFBState := #FB_STATE_IDLE;
	      ELSE
	        #error := TRUE;
	        #errorID := #statRetVal;
	        #statFBState := #FB_STATE_ERROR;
	      END_IF;
	    END_IF;
	    
	    
	  #FB_STATE_ERROR:
	    
	    IF NOT (#executeRead OR #executeWrite) THEN
	      #statFBState := #FB_STATE_IDLE;
	    END_IF;
	  ELSE
	    ;
	END_CASE;
	
	#statExecuteReadOld := #executeRead;
	#statExecuteWriteOld := #executeWrite;
	
	
END_FUNCTION_BLOCK

