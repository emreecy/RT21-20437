FUNCTION_BLOCK "SimaHydTO_ParameterSettings"
{ S7_Optimized_Access := 'TRUE' }
FAMILY : SimaHydTO
VERSION : 1.0
   VAR_IN_OUT 
      hmiConnection : "SimaHydTO_typeHMIConnection";
      axisData : "LSimaHydTO_typeAxisData";
      VCharArray : Array[*] of "SimaHydTO_typeVCharArray";
   END_VAR

   VAR 
      statSaveDBL { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statLoadDBL { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statEditOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statActivateOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statAbortOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statRestoreOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statApplayOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statDefaultAxisData { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : "SimaHydTO_typeHMIConnectionParameterSettingsAxisData";
      instMC_WriteToROM { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : "LSimaHydTO_MC_WriteToROM";
      instMC_ReadFromROM { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : "LSimaHydTO_MC_ReadFromROM";
      instVCharSelector { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : "SimaHydTO_HmiVCharSelector";
      statSaveOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
   END_VAR

   VAR_TEMP 
      tempVariant : Variant;
      tempErrorVariant : Int;
      tempDbAny : DB_ANY;
      tempVCharData : REF_TO "LSimaHydTO_typeVCharData";
   END_VAR


BEGIN
	//=============================================================================
	//SIEMENS AG
	//(c)Copyright 2016 All Rights Reserved
	//-----------------------------------------------------------------------------
	//Library:       SimaHydTO_ParameterSettings
	//Tested with:   S7-1500 V2.5
	//Engineering:   TIA Portal V15
	//Restrictions:  -
	//Requirements:  S7-1500(T)
	//Functionality: Manipulate parameter data of selected hydraulic axis
	//-----------------------------------------------------------------------------
	//Change log table:
	//Version  Date       Expert in charge Changes applied
	//01.00.00 17.07.2019 ArSc             First released version
	//=============================================================================
	
	
	IF (#hmiConnection.AxisSelector.Status.selectionChanged
	    OR #instMC_ReadFromROM.done)
	    OR (#hmiConnection.ParameterSettings.Commands.Edit
	    AND NOT #statEditOld
	    AND NOT #hmiConnection.ParameterSettings.Status.EditorActive)
	THEN
	    IF #hmiConnection.AxisSelector.Status.dataValid THEN
	        //Convert data
	        //Get data from axis
	        #hmiConnection.ParameterSettings.AxisData.Actor := #axisData.Actor;
	        #hmiConnection.ParameterSettings.AxisData.ValveCharacteristic := #axisData.ValveCharacteristic;
	        #hmiConnection.ParameterSettings.AxisData.ForceLimits := #axisData.ForceLimits;
	        #hmiConnection.ParameterSettings.AxisData.Pressure_A_Transducer := #axisData.Pressure_A_Transducer;
	        #hmiConnection.ParameterSettings.AxisData.Pressure_B_Transducer := #axisData.Pressure_B_Transducer;
	        #hmiConnection.ParameterSettings.AxisData.PositionControl := #axisData.PositionControl;
	        #hmiConnection.ParameterSettings.AxisData.ForceControl := #axisData.ForceControl;
	        #hmiConnection.ParameterSettings.AxisData.DynamicAxisModel := #axisData.DynamicAxisModel;
	        #hmiConnection.ParameterSettings.AxisData.SmoothingFilter := #axisData.SmoothingFilter;
	        #hmiConnection.ParameterSettings.AxisData.Name := #axisData.Name;
	        IF #axisData.ValveCharacteristic.DB_NUMBER > 0 THEN
	            #tempDbAny := #axisData.ValveCharacteristic.DB_NUMBER;
	            #tempVariant := DB_ANY_TO_VARIANT(in := #tempDbAny, err => #tempErrorVariant);
	            
	            IF TypeOf(#tempVariant) = LSimaHydTO_typeVCharData THEN
	                #tempVCharData ?= #tempVariant;
	                #hmiConnection.ParameterSettings.AxisData.VCharName := #tempVCharData^.Name;
	            ELSE
	                #hmiConnection.ParameterSettings.AxisData.VCharName := wstring#'';
	            END_IF;
	        ELSE
	            #hmiConnection.ParameterSettings.AxisData.VCharName := wstring#'';
	        END_IF;
	        
	    ELSE
	        #hmiConnection.ParameterSettings.AxisData := #statDefaultAxisData;
	    END_IF;
	    IF #hmiConnection.AxisSelector.Status.selectionChanged THEN
	        #hmiConnection.ParameterSettings.Status.EditorActive := False;
	    END_IF;
	    
	END_IF;
	
	//Open parameter data
	IF (#hmiConnection.ParameterSettings.Commands.Edit
	    AND NOT #statEditOld
	    AND NOT #hmiConnection.ParameterSettings.Status.EditorActive
	    AND #hmiConnection.AxisSelector.Status.dataValid)
	THEN
	    #hmiConnection.ParameterSettings.Status.EditorActive := True;
	END_IF;
	
	//Save parameter data
	IF ((#hmiConnection.ParameterSettings.Commands.Activate AND NOT #statActivateOld)
	    OR (#hmiConnection.ParameterSettings.Commands.Save AND NOT #statSaveOld))
	    AND #hmiConnection.ParameterSettings.Status.EditorActive
	    AND #hmiConnection.AxisSelector.Status.dataValid
	THEN
	    //Write back axis data
	    #hmiConnection.ParameterSettings.Status.StateActivation := 1;
	    
	    #axisData.Actor := #hmiConnection.ParameterSettings.AxisData.Actor;
	    #axisData.ValveCharacteristic := #hmiConnection.ParameterSettings.AxisData.ValveCharacteristic;
	    #axisData.ForceLimits := #hmiConnection.ParameterSettings.AxisData.ForceLimits;
	    #axisData.Pressure_A_Transducer := #hmiConnection.ParameterSettings.AxisData.Pressure_A_Transducer;
	    #axisData.Pressure_B_Transducer := #hmiConnection.ParameterSettings.AxisData.Pressure_B_Transducer;
	    #axisData.PositionControl := #hmiConnection.ParameterSettings.AxisData.PositionControl;
	    #axisData.ForceControl := #hmiConnection.ParameterSettings.AxisData.ForceControl;
	    #axisData.DynamicAxisModel := #hmiConnection.ParameterSettings.AxisData.DynamicAxisModel;
	    #axisData.SmoothingFilter := #hmiConnection.ParameterSettings.AxisData.SmoothingFilter;
	    #axisData.Name := #hmiConnection.ParameterSettings.AxisData.Name;
	    //  save to load memory
	    #hmiConnection.ParameterSettings.Status.EditorActive := False;
	    #hmiConnection.ParameterSettings.Status.StateActivation := 0;
	    #hmiConnection.ParameterSettings.Status.StateLoading := 0;
	END_IF;
	
	IF #hmiConnection.ParameterSettings.Commands.Save
	    //AND #hmiConnection.ParameterSettings.Status.StateActivation = 1
	    AND #hmiConnection.AxisSelector.Status.dataValid
	    AND NOT #statSaveOld
	THEN
	    #statSaveDBL := TRUE;
	    
	END_IF;
	
	#instMC_WriteToROM(execute := #statSaveDBL,
	                   axis := #axisData);
	
	IF #instMC_WriteToROM.busy THEN
	    #hmiConnection.ParameterSettings.Status.StateSaving := 1;
	ELSIF #instMC_WriteToROM.error THEN
	    #hmiConnection.ParameterSettings.Status.StateSaving := 2;
	    #statSaveDBL := FALSE;
	    
	ELSE
	    #hmiConnection.ParameterSettings.Status.StateSaving := 0;
	    #statSaveDBL := FALSE;
	    
	END_IF;
	
	
	IF (#hmiConnection.ParameterSettings.Commands.Restore
	    AND NOT #statRestoreOld)
	    AND #hmiConnection.AxisSelector.Status.dataValid
	THEN
	    #hmiConnection.ParameterSettings.Status.StateActivation := 0;
	    #hmiConnection.ParameterSettings.Status.StateSaving := 0;
	    #hmiConnection.ParameterSettings.Status.StateLoading := 1;
	    
	    #statLoadDBL := true;
	END_IF;
	#instMC_ReadFromROM(execute := #statLoadDBL,
	                    axis := #axisData);
	
	IF NOT #instMC_ReadFromROM.busy THEN
	    IF #instMC_ReadFromROM.done THEN
	        #hmiConnection.ParameterSettings.Status.StateActivation := 0;
	        #hmiConnection.ParameterSettings.Status.StateLoading := 0;
	    ELSIF #instMC_ReadFromROM.error THEN
	        #hmiConnection.ParameterSettings.Status.StateLoading := 2;
	    END_IF;
	    
	    
	    #statLoadDBL := FALSE;
	END_IF;
	
	
	//Abort parameter data
	IF (#hmiConnection.ParameterSettings.Commands.Abort
	    AND #hmiConnection.ParameterSettings.Status.EditorActive)
	THEN
	    //Reset output singal
	    #hmiConnection.ParameterSettings.Status.EditorActive := False;
	END_IF;
	
	
	//Save data from last cycle
	#statAbortOld := #hmiConnection.ParameterSettings.Commands.Abort;
	#statActivateOld := #hmiConnection.ParameterSettings.Commands.Activate;
	#statEditOld := #hmiConnection.ParameterSettings.Commands.Edit;
	#statRestoreOld := #hmiConnection.ParameterSettings.Commands.Restore;
	#statSaveOld := #hmiConnection.ParameterSettings.Commands.Save;
	
END_FUNCTION_BLOCK

